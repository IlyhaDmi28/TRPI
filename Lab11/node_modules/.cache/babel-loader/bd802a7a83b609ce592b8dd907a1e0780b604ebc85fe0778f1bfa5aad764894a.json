{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nikit\\\\Desktop\\\\univer\\\\2cource2sem\\\\TypeScript\\\\react\\\\lab11\\\\lab11\\\\src\\\\components\\\\CardList\\\\cardList.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Card from \"../Card/card\";\nimport \"./cardList.css\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getFilterCard = (cards, filterState, tagsState) => {\n  let massCards = cards;\n  if (filterState.modeCountry) {\n    massCards = massCards.filter(item => item.counName.toLowerCase().includes(filterState.modeCountry.toLowerCase()));\n  }\n  if (filterState.modeSchedule) {\n    massCards = massCards.filter(item => item.shedule == filterState.modeSchedule);\n  }\n  if (filterState.modeEmployment) {\n    massCards = massCards.filter(item => item.employment == filterState.modeEmployment);\n  }\n  if (filterState.modeBetween) {\n    massCards = massCards.filter(item => item.between == filterState.modeBetween);\n  }\n  if (filterState.modeIncome) {\n    massCards = massCards.filter(item => Number.parseInt(item.income) >= Number.parseInt(filterState.modeIncome));\n  }\n  if (!tagsState.length) return massCards;\n  return massCards.filter(item => item.tags.filter(tag => tagsState.includes(tag)).length === tagsState.length);\n};\nconst getCorrectCards = (cards, headerState, tagsState, filterState) => {\n  return getFilterCard(headerState === \"Search\" ? cards : cards.filter(item => item.isLiked === true), filterState, tagsState);\n};\nconst CardList = () => {\n  _s();\n  const tagsState = useSelector(state => state.tags.mode);\n  const headerState = useSelector(state => state.searchMode.mode);\n  const massItems = useSelector(state => state.setMassMode.mode);\n  const filterState = useSelector(state => state.filterMode);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapperList\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerList\",\n      children: getCorrectCards(massItems, headerState, tagsState, filterState).map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          card: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(CardList, \"jKXnmZsToji97cyle05751K7jZI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n_c = CardList;\nexport default CardList;\nvar _c;\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"names":["React","Card","useSelector","jsxDEV","_jsxDEV","getFilterCard","cards","filterState","tagsState","massCards","modeCountry","filter","item","counName","toLowerCase","includes","modeSchedule","shedule","modeEmployment","employment","modeBetween","between","modeIncome","Number","parseInt","income","length","tags","tag","getCorrectCards","headerState","isLiked","CardList","_s","state","mode","searchMode","massItems","setMassMode","filterMode","className","children","map","index","card","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nikit/Desktop/univer/2cource2sem/TypeScript/react/lab11/lab11/src/components/CardList/cardList.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Card from \"../Card/card\";\r\nimport \"./cardList.css\"\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\n\r\nconst getFilterCard = (cards,filterState,tagsState) =>{\r\n    let massCards = cards\r\n    if(filterState.modeCountry){\r\n        massCards = massCards.filter((item) => item.counName.toLowerCase().includes(filterState.modeCountry.toLowerCase()));\r\n    }\r\n    if(filterState.modeSchedule){\r\n        massCards = massCards.filter((item) => item.shedule == filterState.modeSchedule)\r\n    }\r\n    if(filterState.modeEmployment){\r\n        massCards = massCards.filter((item) => item.employment == filterState.modeEmployment)\r\n    }\r\n    if(filterState.modeBetween){\r\n        massCards = massCards.filter((item) => item.between == filterState.modeBetween)\r\n    }\r\n    if(filterState.modeIncome){\r\n        massCards = massCards.filter((item) => Number.parseInt(item.income) >= Number.parseInt(filterState.modeIncome))\r\n    }\r\n    if(!tagsState.length)\r\n        return massCards\r\n    return massCards.filter(\r\n        (item) => item.tags.filter((tag) => tagsState.includes(tag)).length === tagsState.length\r\n    )\r\n\r\n}\r\n\r\nconst getCorrectCards = (cards,headerState,tagsState,filterState) =>{\r\n        return getFilterCard(headerState === \"Search\" ? cards : cards.filter(item => item.isLiked === true),filterState, tagsState)\r\n}\r\n\r\nconst CardList = () =>{\r\n    const tagsState = useSelector((state) => state.tags.mode)\r\n    const headerState = useSelector((state) => state.searchMode.mode);\r\n    const massItems = useSelector((state) => state.setMassMode.mode);\r\n    const filterState = useSelector((state) => state.filterMode)\r\n    return(\r\n    <div className=\"wrapperList\">\r\n        <div className=\"containerList\">\r\n            { getCorrectCards(massItems,headerState,tagsState,filterState).map((item,index)=>{\r\n                return <Card  key={index} card={item}  />\r\n            })}\r\n\r\n            \r\n        </div>\r\n    </div>\r\n    )\r\n}\r\nexport default CardList"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}